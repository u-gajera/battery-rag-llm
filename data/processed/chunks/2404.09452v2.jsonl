{"chunk_id": "2404.09452v2_p0_c0", "doc_id": "2404.09452v2", "text": "Enhancing GPU-acceleration in the Python-based Simulations of Chemistry Framework Xiaojie Wu1,*, Qiming Sun1,**, Zhichen Pu3, Tianze Zheng3, Wenzhi Ma3, Wen Yan1, Yu Xia3, Zhengxiao Wu3,‡, Mian Huo3,‡, Xiang Li3, Weiluo Ren3, Sheng Gong1, Yumin Zhang1, and Weihao Gao3 1ByteDance Research, USA 3ByteDance Research, China *xiaojie.wu@bytedance.com **osirpt.sun@gmail.com ‡work done at ByteDance as intern Abstract We describe our contribution as industrial stakeholders to the existing open-source GPU4PySCF project (https: //github.com/pyscf/gpu4pyscf), a GPU-accelerated Python quantum chemistry package. We have integrated GPU acceleration into other PySCF functionality including Density Functional Theory (DFT), geometry optimiza- tion, frequency analysis, solvent models, and density fitting technique. Through these contributions, GPU4PySCF v1.0 can now be regarded as a fully functional and industrially relevant platform which we demonstrate in this work through a range of tests. When performing DFT calculations on modern GPU platforms, GPU4PySCF delivers 30 times speedup over a 32-core CPU node, resulting in approximately 90% cost savings for most DFT tasks. The performance advantages and productivity improvements have been found in multiple industrial appli- cations, such as generating potential energy surfaces, analyzing molecular properties, calculating solvation free energy, identifying chemical reactions in lithium-ion batteries, and accelerating neural-network methods. With the improved design that makes it easy to integrate with the Python and PySCF ecosystem, GPU4PySCF is natural choice that we can now recommend for many industrial quantum chemistry applications. 1 Introduction Quantum chemistry is essential in various fields such as drug discovery, materials science, chemi- cal engineering, and environmental science. It primarily relies on ab initio simulations for atomic interactions, serving as a crucial source of data beyond experimental findings. These fields often require extensive ab initio simulations to explore chemical spaces, identify equilibrium geome- tries, and determine chemical properties. Density Functional Theory (DFT) stands out as the most commonly used method in quantum chemistry for generating physical observables. Accord- ing to a 2018 workload analysis by the National Energy Research Scientific Computing Center (NERSC), DFT algorithms account for 30% of total computational resource usage1. The surge 1https://portal.nersc.gov/project/m888/nersc10/workload/N10_Workload_Analysis.latest.pdf 1 arXiv:2404.09452v2 [physics.comp-ph] 22 Jul 2024", "page": 0, "position": 0}
{"chunk_id": "2404.09452v2_p1_c0", "doc_id": "2404.09452v2", "text": "in demand for quantum chemistry calculations is not only due to traditional scientific simulations but also the emergence of deep learning models. These models significantly increase the de- mand for data from ab initio calculations and use quantum features as input. Consequently, the development of DFT algorithms for GPUs has become increasingly beneficial for these industries. The utilization of GPUs in quantum chemistry has emerged as a transformative tool, thanks to their parallel processing capabilities. GPUs are adept at managing large data volumes and conducting calculations across multiple cores simultaneously, making them exceptionally efficient for quantum chemistry simulations. The initiative to accelerate two-electron integral evaluations using GPUs can be traced back to 2008 [1, 2], a period when gaming cards exhibited limited double-precision computing capabilities. Today’s GPUs not only offer substantial floating-point performance but also boast high memory bandwidth and extensive memory capacity, effec- tively minimizing the bottlenecks associated with quantum chemistry algorithms. Traditional CPU-based quantum chemistry software packages, such as GAMESS [3, 4], GAUSSIAN, Q- Chem [5], and Psi4 [6] now delegate computationally intensive tasks to GPUs through interfaces like BrainQC [7, 8]. Furthermore, the past decade has seen the development of GPU-based quantum chemistry packages, including Terachem [9, 10] and Quick [11, 12, 13], which notably reduce CPU-GPU data transfers. Achieving optimal performance in quantum chemistry computations on Graphics Processing Units (GPUs) necessitates an approach that extends significantly beyond the simple porting of algorithms from Central Processing Units (CPUs) to GPU architectures. This complex process is hindered by several technical challenges that can substantially impact the acceleration of quantum chemistry simulations on GPUs. 1) Limited memory. GPUs are equipped with high- speed memory that, despite its rapid access capabilities, is limited in capacity and substantially smaller than the system RAM found in CPU-based systems. The quantum chemistry domain, characterized by its reliance on large matrices and complex wave functions, frequently demands more memory than GPUs can provide. This limitation often requires computational strategies such as offloading portions of the data back to the CPU or the implementation of advanced memory management techniques, both of which can negatively affect", "page": 1, "position": 0}
{"chunk_id": "2404.09452v2_p1_c1", "doc_id": "2404.09452v2", "text": "capabilities, is limited in capacity and substantially smaller than the system RAM found in CPU-based systems. The quantum chemistry domain, characterized by its reliance on large matrices and complex wave functions, frequently demands more memory than GPUs can provide. This limitation often requires computational strategies such as offloading portions of the data back to the CPU or the implementation of advanced memory management techniques, both of which can negatively affect computational throughput. 2) CPU-GPU communication. The bandwidth between CPU memory and GPU memory is restricted and can become a critical bottleneck, especially in computational scenarios where the GPU necessitates frequent access or updates to data stored in the main system memory. This bottleneck necessitates the re-implementation of a significant number of traditional CPU algorithms directly on the GPU to minimize data transfer overhead. 3) Complexities of GPU architecture. The process of maximizing GPU computational efficiency involves the fine-tuning of several coding and architectural aspects, including but not limited to, optimizing memory access patterns, managing thread execution, and configuring kernels. The same optimization strategies do not necessarily apply to the new architecture. This level of optimization is highly specialized and demands a considerable investment of time, highlighting the intricate and expert-driven nature of leveraging GPU capabilities for the advancement of quantum chemistry calculations. Optimizing a quantum chemistry workflow that balances chemical accuracy and computational efficiency requires extensive domain expertise and practical experience. Initially, a quantum chemist is tasked with selecting an appropriate basis set and exchange-correlation functional from a broad dataset, exemplified by the Basis Set Exchange, which catalogs over 600 basis sets [14], and LibXC, comprising more than 400 exchange-correlation functionals [15]. Subsequent con- siderations include evaluating methods for dispersion correction, solvent model selection, basis set superposition error (BSSE) correction, and establishing convergence criteria for various com- 2", "page": 1, "position": 1}
{"chunk_id": "2404.09452v2_p2_c0", "doc_id": "2404.09452v2", "text": "putational tasks. The adoption of recent composite DFT protocols, such as PBEh-3c [16], ωB97X-3c [17], and r2SCAN-3c [18], necessitates precise configurations of basis sets, exchange- correlation functionals, BSSE corrections, and dispersion corrections. Additionally, contemporary quantum chemistry workflows frequently incorporate integration with other software packages, including RDKit, PyTorch, and Qiskit, to extend their computational capabilities. Notably, the open-source communities behind PySCF [19] and Psi4 [6] have contributed user-friendly Python interfaces, offering a wide range of functionalities. PySCF, in particular, is recognized for its straightforward, Pythonic interface, facilitating seamless integration with other Python libraries and enabling the scripting of customized quantum chemistry workflows. Its adaptable design also supports acceleration within the modern GPU ecosystem, underscoring the importance of flexible, integrated approaches in the development of efficient quantum chemistry workflows. In this work, we will present our contributions to the GPU4PySCF package and related mod- ules to enhance its functionality. GPU4PySCF is an open-source project that was initiated in the Chan group [20] to add GPU acceleration to key parts of the PySCF computational work- flow. At the time that we started our work, GPU4PySCF contained CUDA kernels for 4-center two-electron integrals and GPU accelerated direct SCF (Hartree-Fock) functionality [20]. Our contributions enhance the capabilities of this module in several key areas: 1) through density fit- ting algorithms. These adapt the Rys quadrature CUDA kernels in GPU4PySCF to the 3-center quantities for density fitting. However, once the density fitted integrals are computed, the re- maining operations are tensor operations, which are inherently more GPU-friendly. The density fitting implementation is optimized for small to medium sized molecules, and thus complements the existing functionality for direct Self-Consistent Field (SCF) methods that can be extended to larger molecules. 2) Optimizing our codebase to leverage modern GPU architectures, such as tensor cores, to achieve up to twice the speed in tensor contractions. 3) Integrating a wide array of open-source packages from the quantum chemistry community into the PySCF package, thus supporting sophisticated DFT methods, popular basis sets, solvent models, chemical property calculations, geometry optimization, and transition state search methodologies. Through these comprehensive contributions, we can now consider", "page": 2, "position": 0}
{"chunk_id": "2404.09452v2_p2_c1", "doc_id": "2404.09452v2", "text": "larger molecules. 2) Optimizing our codebase to leverage modern GPU architectures, such as tensor cores, to achieve up to twice the speed in tensor contractions. 3) Integrating a wide array of open-source packages from the quantum chemistry community into the PySCF package, thus supporting sophisticated DFT methods, popular basis sets, solvent models, chemical property calculations, geometry optimization, and transition state search methodologies. Through these comprehensive contributions, we can now consider the GPU4PySCF package to be feature-rich and an industrially relevant quantum chemistry tool. With our contributions, we underscore the notable advantages of GPU4PySCF as follows: • Speed: GPU4PySCF now provides performance that is equivalent to that of 600-1000 CPU cores for running conventional CPU-based quantum chemistry software. As a result, it offers substantial cost savings, for instance, up to 90% when utilizing the NVIDIA A100-80G cards. • Python Integration: The framework allows direct access to quantum features of atoms at the Python level, ensuring seamless compatibility with other Python-based packages such as PyTorch, Jax, TensorFlow, RDkit, and more. • Open Source: Our contributions to GPU4PySCF benefits from the support of the PySCF community, the largest open-source quantum chemistry community, fostering collaborative development and innovation. • Application Driven: With our contributions that are specifically optimized and tailored for industrial applications, GPU4PySCF excels in tasks such as DFT calculations, offering practical advantages for commercial research and development. Detailed performance metrics and benchmarks are provided in Section 2. These calculations 3", "page": 2, "position": 1}
{"chunk_id": "2404.09452v2_p3_c0", "doc_id": "2404.09452v2", "text": "have been rigorously cross-validated with Q-Chem 6.1, ensuring reliability and accuracy. Fur- thermore, in Section 3 briefly illustrates how GPU4PySCF v1.0 can be utilized to navigate the potential energy landscape, analyze quantum features, compute thermodynamic properties, es- timate solvation free energies, quantify chemical reactions, and integrate with neural network models. This comprehensive approach showcases the framework’s versatility and potential to revolutionize quantum chemistry computations through GPU acceleration. 2 Performance and Benchmark 2.1 Dataset and Performance We focus on benchmarks with the density fitting scheme, using the optimized implementation that we have contributed. This is efficient for small molecules with less than 200 atoms. A small and diverse dataset is constructed for the benchmarking the fundamental modules in GPU4PySCF. We select small molecules (< 100 atoms) from the supplement information in [21] and two medium-sized molecules from the supplement information in [8]. The newly constructed dataset includes 8 elements (H, C, O, N, Mg, S, Cl, P), and 13 small molecules with 20-168 atoms. The details of the dataset are provided in Appendix A. The xyz files and benchmarking details can be found on GitHub. Other transition metals, such as Nb, Ti, Ru and so on, are also supported in GPU4PySCF, although they are not included in this dataset. This capability will be shown in Sec. 3.4.1. Larger molecules with more than 168 atoms can be calculated within the existing direct SCF scheme in GPU4PySCF [20], which we do not focus on here. For a typical DFT protocol with def2-TZVPP, B3LYP, and (99,590) grids, we record the wall clock time for SCF, gradient, and Hessian calculations on NVIDIA A100-80G. For the smallest molecule (Vitamin C) in the dataset, SCF, gradient, and Hessian take 1.7, 0.68, and 43 seconds respectively. For the largest molecule (Valinomycin) in the dataset, SCF and gradient calculations take 309 seconds and 58 seconds respectively. The Hessian calculation of Sphingomyelin (84 atoms) takes 30 minutes. Hessian calculation is the most expensive module of the vibrational analysis. The vibrational analysis of moderately sized (100-200 atoms) molecules is prohibitively expensive with traditional quantum chemistry softwares [22]. Unfortunately, coupled-perturbed SCF iterations", "page": 3, "position": 0}
{"chunk_id": "2404.09452v2_p3_c1", "doc_id": "2404.09452v2", "text": "Hessian take 1.7, 0.68, and 43 seconds respectively. For the largest molecule (Valinomycin) in the dataset, SCF and gradient calculations take 309 seconds and 58 seconds respectively. The Hessian calculation of Sphingomyelin (84 atoms) takes 30 minutes. Hessian calculation is the most expensive module of the vibrational analysis. The vibrational analysis of moderately sized (100-200 atoms) molecules is prohibitively expensive with traditional quantum chemistry softwares [22]. Unfortunately, coupled-perturbed SCF iterations for (Azadirachtin, Taxol, Valinomycin) does not converge. The time scaling curve of SCF, gradient, and Hessian calculations is shown in Figure 1. Theoretically, SCF and gradient calculations are quartic scaling with respect to the system size, while Hessian calculation is O(N 5). The slope of the scaling curve decreases as the system size gets larger, due to sparsity. The bottleneck of calculating a large molecule is the CPU memory storage. A CPU-GPU hybrid strategy is employed to store GTO integrals in this work. For small molecules, all the intermediate variables are stored in GPU memory. For the large system, the variables are stored in CPU memory. The data in CPU memory is asynchronously transferred to GPU memory for consumption. 2.2 Speedup of SCF, Gradient, and Hessian Calculations Achieving complete alignment between various quantum chemistry software settings presents a significant challenge. Fundamental configurations like the threshold for two-electron integrals, exchange-correlation functionals, basis sets, and Lebedev grids are generally standardized within the quantum chemistry community. However, more intricate adjustments—such as mitigating the linear dependence of atomic orbitals, defining SCF convergence criteria, and pruning DFT grids—often exhibit subtle discrepancies. Moreover, benchmarking these results against com- mercial software treated as a ”black box” adds an additional layer of complexity. In our analysis, 4", "page": 3, "position": 1}
{"chunk_id": "2404.09452v2_p4_c0", "doc_id": "2404.09452v2", "text": "Figure 1: Scaling curve of SCF, gradient, and Hessian calculations. def2-TZVPP basis set, def2-universal-JKFIT auxiliary basis, B3LYP, (99,590) grids, on A100-80G. we strive to minimize these discrepancies by uniformly applying stringent criteria across basic settings. Given the restricted access to commercial quantum chemistry software, our bench- marking efforts are focused exclusively on Q-Chem, a prominent commercial platform renowned for its cutting-edge algorithms designed for large systems. The discrepancies between Q-Chem 6.1 and GPU4PySCF for exchange-correlation functionals and different basis sets are shown in Appendix B and C. Our benchmarking endeavors concentrate on three foundational modules: Self-Consistent Field (SCF), gradient, and Hessian calculations. These modules are the most expensive components in numerous quantum chemistry computations. In this section, all computations are conducted on closed-shell systems using density fitting. The functionalities of open-shell calculations will be shown in Sec. 3.4.2 and Sec. 3.4.3. Notably, due to the memory management issue within the density fitting coupled perturbed SCF iteration in Q-Chem, the reference Hessian calculations are performed using finite difference methods. But the Hessian matrices are calculated analytically in GPU4PySCF. We anticipate that resolving these issues could enhance the efficiency of Hessian calculations in Q-Chem by a factor of 2-3. Hessian calculations for molecules exceeding 84 atoms become prohibitively expensive for traditional quantum chemistry packages. We only benchmark the speedup across molecules containing 20-84 atoms. On average, GPU4PySCF achieves a performance that is 20 times faster than identical SCF calculations performed using Q-Chem 6.1 on 32 CPU cores. This speedup increases dramatically to 50 times for Hessian calculations, although the acceleration observed in gradient calculations is relatively modest. However, since gradient calculations are generally quicker than SCF iterations, this does not significantly affect the overall efficiency of geometry optimization or transition state search tasks. An evaluation of the actual costs based on AWS pricing for comparable machinery shows that GPU4PySCF can reduce expenses by about 90% across most tasks. For the gradient calculation with pure DFT, the saving decreases to 70%. This task technically can 5", "page": 4, "position": 0}
{"chunk_id": "2404.09452v2_p5_c0", "doc_id": "2404.09452v2", "text": "Figure 2: Speedup and actual cost saving of GPU4PySCF on A100-80G over Q-Chem v6.1 on 32-core CPU. The cost is estimated based on AWS pricing. $40.966/hr for p4de.24xlarge GPU instance with 8 A100-80G GPUs, 96 vCPUs and 1152 GiB CPU memory. $2.117/hr for r7i.8xlarge CPU instance with 32 vCPUs and 256 GiB memory. def2-TZVPP basis set, def2- universal-JKFIT auxiliary basis, (99,590) XC grids, (50,194) NLC grids. be accelerated with a more efficient algorithm [23]. We leave this implementation as future work. It is observed that larger molecules typically experience a more substantial speedup compared to smaller molecules. This is due to the high GPU occupancy of a large molecule. 2.3 Speedup of DFT with Implicit Solvent Models Solvent models in quantum chemistry critical for simulating and understanding the behavior of molecules in solution, an essential aspect given most chemical reactions occur in some type of solvent. The Polarizable Continuum Model (PCM) models are the most common implicit solvent models. But the computational efficiency of those models are rarely discussed. Especially when the density fitting scheme is employed, the computational cost of PCM models is not negligible. Since Q-Chem 6.1 does not support density fitting SCF with PCM models, we use the standard SCF scheme as a reference. Thus, the following speedups should be interpreted as two factors: GPU speedup and density fitting speedup. We stress that the different algorithms are used in Q-Chem and GPU4PySCF. The comparison is performed to mimic the actual usage of the solvent models. The discrepancies between Q-Chem 6.1 and GPU4PySCF for solvent models are shown in Appendix D. We benchmark DFT calculations employing two PCM models, C-PCM [24, 25] and IEF-PCM [26]. IEF-PCM model is slightly more expensive than C-PCM model since more entries are calculated for the linear system. The SMD model [27] introduces the additional computation of CDS con- tributions on the top of IEF-PCM model. Yet, the computational cost of these contributions is almost negligible. The efficiency of CDS contributions will not be discussed in this section, but the accuracy benchmarks will be presented in Section 3.3. Other types of implicit solvent", "page": 5, "position": 0}
{"chunk_id": "2404.09452v2_p6_c0", "doc_id": "2404.09452v2", "text": "phase is slightly lower than the results in Table 1. For instance, the speedup of SCF for Vitamin C in gas phase is around 33. The speedup difference between gas phase and liquid phase suggests the high efficiency of PCM models in GPU4PySCF. Molecule C-PCM IEF-PCM SCF Gradient Hessian SCF Gradient Hessian Vitamin C 39.8 21.6 107.2 31.0 18.3 100.1 Inosine 64.3 30.4 162.3 54.3 30.6 158.2 Bisphenol A 72.8 35.9 158.7 67.1 37.6 155.2 Mg Porphin 86.8 40.9 168.5 81.1 41.4 166.4 Penicillin V 78.0 36.8 186.0 81.0 36.7 186.5 Table 1: Speedup of GPU4PySCF on A100-80G over Q-Chem 6.1 on 32-core CPUs for DFT tasks with PCM solvent models. B3LYP, def2-TZVPP, def2-universal-JKFIT, (99,590), 302 Lebedev grids for both H atoms and Heavy atoms. 3 Applications In this section, we take the opportunity to showcase the capabilities of of GPU4PySCF v1.0 with our new contributions in several industrial applications. A complete list of capabilities will be shown in Section 4.2. 3.1 Exploring Potential Energy Surface 3.1.1 Torsion Scan The development of molecular mechanics force fields significantly benefits from torsion scans conducted at precise quantum chemistry levels, serving as a crucial source of training data [28, 29, 30, 31, 32, 33, 34]. However, torsion scans are notably time-consuming, as they require at least 24 independent constrained geometry optimizations for each proper torsion angle in a molecule. These optimizations determine the potential energy of the molecule with the torsion angle fixed at specific values within the [−180◦, +180◦] range. Depending on the complexity of the potential energy surface, each optimization might necessitate 10-100 sequential quantum chemistry calculations, underscoring the importance of computational efficiency for this task. Historically, such scans have been restricted to small molecule fragments, typically using small basis sets at the double-zeta level. The advent of GPU4PySCF, coupled with its seamless integration with the Pythonic interface of the geometric optimizer geomeTRIC, revolutionizes this process, allowing for torsion scans on a scale previously deemed unfeasible. This enables routine computations of torsion scans for real-world drug molecules employing large basis sets. An illustrative example of this capability is provided by our", "page": 6, "position": 0}
{"chunk_id": "2404.09452v2_p7_c0", "doc_id": "2404.09452v2", "text": "Figure 3: An example of torsion scan. (a) The molecule Enzalutamide (PubChem CID 15951529). (b) Torsion scan energy profile and number of geometry optimization iterations (number of DFT calculations) at each scanned proper torsion angle degree. 3.1.2 Dimer Interaction Energies Noncovalent interactions are paramount in molecular modeling, especially for the accurate pre- diction of thermodynamics and transport properties [35, 36]. Additionally, robust noncovalent interactions, such as hydrogen bonding and π-π stacking, are essential for ligand-protein bind- ing [37, 38, 32, 39]. The assessment of dimer interaction energies through quantum mechanical approaches serves as a prevalent method to explore noncovalent interactions. However, attain- ing precise noncovalent interaction energies demands high-fidelity techniques, which invariably elevate computational costs. Thanks to the efficiency of GPU4PySCF, interaction energies for systems comprising hundreds of atoms are now attainable within practical timeframes, even when utilizing sophisticated DFT methodologies that incorporate non-local correlation effects. We offer an illustrative example involving the oral COVID-19 antiviral Nirmatrelvir [40] (Pub- Chem CID 155903259, Figure 4 (a)), a SARS-CoV-2 main protease inhibitor developed by Pfizer. In its binding pocket, Nirmatrelvir forms a hydrogen bond with a histidine side chain. The inter- action energy between Nirmatrelvir and the histidine residue (Figure 4 (b)) is calculated using various bases. For the direct evaluation of interaction energy, 42 single-point energy calcula- tions were conducted. The total wall times for def2-SVP, def2-SVPD, and def2-TZVPPD bases were 2370, 3082, and 5823 seconds, respectively. Moreover, the counterpoise method (CP) [41] was applied to mitigate basis set superposition error (BSSE) [42, 43], involving 120 single-point energy calculations for each base, with total wall times of 4020, 5510, and 11892 seconds, re- spectively. All these calculations were performed using the ωB97M-V functional and grid level 3 in PySCF with density fitting on an A100-80G GPU. 3.1.3 Lithium Ion Solvation Structure The concept of solvation structure engineering has been utilized in recent studies, such as high- concentrated [44], localized high-concentrated [45], and fluorinated ether-based electrolytes [46, 47]. By engineering solvation structures, these studies show improvements in ion transport, solid electrolyte interphase, and electrochemical stability [48, 49, 50, 51]. Binding energy of", "page": 7, "position": 0}
{"chunk_id": "2404.09452v2_p8_c0", "doc_id": "2404.09452v2", "text": "Figure 4: An example of noncovalent interaction. (a) Nirmatrelvir (left) and the histidine residue (right). The hydrogen bond distance (between donor and acceptor atoms) is 2.8 ˚A in the shown geometry, which is truncated from PDB 7yrz. (b) Interaction energy at varying hydrogen bond distances. corresponding binding energies facilitate the realization of high energy density, fast charging and improved cell lifetime. In this work, we examine the solvation structures of Li+ ions in the electrolyte by computing the structure and binding energy of Li+ ion clusters. Through molecular dynamics simulations of the battery electrolyte containing 2.25M LiFSI(lithium bis(fluorosulfonyl)imide) in DMC(dimethyl carbonate):EC(ethylene carbonate) with a weight percentage ratio of 51:49, we captured typical solvation structures of Li+ ions and computed the binding energies of these structures using GPU4PySCF, as presented in Figure 5 and Table 2. Most of the clusters we examined have a coordination number of 4, consisting of either solvent or anion molecules, or a combination of the two. Their binding energies range from -0.065 eV to - 1.078 eV, indicating significant differences in the energy stability of the clusters. We observe that clusters composed solely of Li+ and FSI−exhibit the most positive binding energies compared to those containing solvents. This observation aligns with chemical intuition, suggesting that the salt dissolution of LiFSI in an EC-DMC polar solvent mixture is preferred, manifesting the fundamental requirement of solvent functionality in Li-battery liquid electrolyte applications. Besides, clusters with the same composition can exhibit different energies if their structures vary, as shown in Figure 6 for the Li+(DMC)(EC)(FSI−)2 cluster, suggesting adequate geometric sampling for DFT calculations is necessary for accurate representation of solvation structure stabilities, emphasizing the importance of computational efficiency provided in the code. All calculations are performed with 6-311++G(3df,3pd) basis set and cc-pVTZ-RI auxiliary basis for the density fitting technique. The IEF-PCM with UFF radii was utilized for modeling solvent effects, with the dielectric constant being 20.0. Additionally, M06-2X functional together with Grimme’s D3 version of dispersion correction with zero damping was used. Note that our examples in this section are merely illustrative and do not provide a complete study", "page": 8, "position": 0}
{"chunk_id": "2404.09452v2_p10_c0", "doc_id": "2404.09452v2", "text": "Cluster Binding Energy Li+(DMC)2(FSI−)2 -1.077 Li+(DMC)2(EC)(FSI−) -1.020 Li+(DMC)(EC)2(FSI−) -1.018 Li+(DMC)(EC)(FSI−)2 -1.004 Li+(DMC)(EC)3 -0.893 Li+(DMC)2(EC)2 -0.857 Li+(EC)4 -0.735 Li+(FSI−)3 -0.656 Li+(FSI−)4 -0.065 Table 2: Binding energies (eV) of various clusters. 3.2 Analyzing Molecular Properties 3.2.1 CHELPG Charge Calculation CHELPG (charges from electrostatic potentials using a grid-based method) is a computational method designed to calculate atomic charges within a molecule based on the electrostatic po- tential generated by its electrons [55, 56]. Introduced by Breneman and Wiberg in 1990, this method aims to derive atomic charges that are reflective of the molecule’s electrostatic potential on a grid surrounding the molecule [55]. These charges can be then utilized in simulations to model intermolecular forces and other electrostatic properties. The essence and the most time- consuming part of CHELPG lies in calculating the electrostatic potential at grids around the molecule. The method then optimizes the atomic charges by fitting these calculated potentials to the actual electrostatic potential observed, using a least-squares method. This optimization process ensures that the derived atomic charges closely represent the true electrostatic potential around the molecule. Followed by the work of Herbert and co-workers [57], CHELPG is implemented in the package, and the computational efficiency has been enhanced with the aid of GPUs. Our implementation uses the Cartesian grid with the default spacing 0.3 ˚A and the radial extent of the CHELPG grid 2.8 ˚A as recommended in Ref. [55]. Besides, the smoothing function used in Ref. [57] is also implemented, where the Bondi radius is used [58] (the radius of hydrogen is changed to 1.1 ˚A). Consistent results can be obtained when employing identical settings with Q-Chem. As shown in Figure 7, in GPU4PySCF, the calculation speed of CHELPG has been greatly improved approximately 10 times versus CPU-based quantum chemistry software [5]. This improvement in computational efficiency is due to the efficient implementation of molecular integrations (cal- culating the electrostatic potential at grids) on GPU. All the calculations in this subsection are performed using B3LYP functional and def2-SVPD basis with density fitting used. 3.2.2 NMR Shielding Constants Nuclear Magnetic Resonance (NMR) Shielding Constants represent a pivotal spectroscopic pa- rameter", "page": 10, "position": 0}
{"chunk_id": "2404.09452v2_p12_c0", "doc_id": "2404.09452v2", "text": "work and atomic-level interactions makes it indispensable for chemists. For example, NMR is particularly valuable in organic chemistry for identifying the composition and structure of small organic molecules, aiding in the elucidation of complex organic compounds and reaction mech- anisms [60, 61]. Employing DFT to calculate NMR shielding constants offers the significant advantage of a level of precision that closely aligns with experimental results with efficiency, yet without the extensive resource demands of experiments [62]. This balance makes calculations of NMR shielding constants an invaluable tool for guiding experimental design and interpreting complex NMR spectra, bridging the gap between theoretical insights and practical applications in stereochemistry. In this work, the NMR shielding constants are implemented using the gauge- including atomic orbitals [63] (GIAO) to address the uncertainty of the gauge origin, introduced by the introduction of the uniform external magnetic field. The specific working equations may be referred to in the discussion section on general NMR calculations as presented in Ref. [64]. Nuclear Magnetic Resonance (NMR) Shielding Constants represent a pivotal spectroscopic pa- rameter in NMR spectroscopy, utilized for determining the electronic structure and geometric configuration of molecules [59]. During NMR experiments, the absorption signals through nu- clear spin transitions under the external magnetic field are detected. Actually, the magnetic field experienced by the nucleus is not the external magnetic field per se, but rather the residual field post electron shielding. The shielding constant elucidates the behavior of the wave function in the vicinity of the nucleus, serving as a coefficient between the electron shielding effect and the external magnetic field. Its ability to provide detailed information about the molecular frame- work and atomic-level interactions makes it indispensable for chemists. For example, NMR is particularly valuable in organic chemistry for identifying the composition and structure of small organic molecules, aiding in the elucidation of complex organic compounds and reaction mech- anisms [60, 61]. Employing DFT to calculate NMR shielding constants offers the significant advantage of a level of precision that closely aligns with experimental results with efficiency, yet without the extensive resource demands of experiments [62]. This balance makes calculations", "page": 12, "position": 0}
{"chunk_id": "2404.09452v2_p12_c1", "doc_id": "2404.09452v2", "text": "For example, NMR is particularly valuable in organic chemistry for identifying the composition and structure of small organic molecules, aiding in the elucidation of complex organic compounds and reaction mech- anisms [60, 61]. Employing DFT to calculate NMR shielding constants offers the significant advantage of a level of precision that closely aligns with experimental results with efficiency, yet without the extensive resource demands of experiments [62]. This balance makes calculations of NMR shielding constants an invaluable tool for guiding experimental design and interpreting complex NMR spectra, bridging the gap between theoretical insights and practical applications in stereochemistry. In this work, the NMR shielding constants are implemented using the gauge- including atomic orbitals [63] (GIAO) to address the uncertainty of the gauge origin, introduced by the introduction of the uniform external magnetic field. The specific working equations may be referred to in the discussion section on general NMR calculations as presented in Ref. [64]. An illustrative example of NMR shielding constants of hydrogens on toluene is displayed in Figure 8. When the toluene is oriented perpendicular to the external magnetic field (and for non-perpendicular orientations, it can be decomposed into horizontal and vertical magnetic fields), its delocalized π electrons will generate a ring current, which in turn induces a magnetic field. The direction of the induced magnetic field is opposite to that of the external magnetic field on the top and bottom sides of the phenyl ring. However, on the sides of the phenyl ring (where the hydrogen atoms are positioned on the sides of the ring), the directions are the same, i.e., the induced magnetic field enhances the effect of the external magnetic field, deshielding the hydrogen nuclei and causing the chemical shift to move to lower field values; whereas the hydrogen atoms on the methyl group are in a stronger shielding environment, leading to the chemical shift to move to higher field values. Due to the geometrical configuration, the three hydrogen atoms on the methyl group exhibit differing chemical shifts, although theoretically, they should be identical. 13", "page": 12, "position": 1}
{"chunk_id": "2404.09452v2_p13_c0", "doc_id": "2404.09452v2", "text": "Figure 8: Chemical shifts of hydrogens on toluene (in units of p.p.m.). Hydrogens on the methyl group are indicated in blue text, while hydrogens on the benzene ring are in red. This calculation employs the B3LYP functional, the def2-TZVPP basis set, and the def2-universal-JKFIT auxiliary basis set, and the structure of toluene is taken from PubChem [65]. 3.3 Solvation Free Energy Implicit solvent models are computational tools designed to efficiently simulate the effect of a solvent on molecular systems, emphasizing the solvent’s overall impact rather than detailing every interaction between solvent and solute molecules. In the realm of quantum chemistry, electrostatic interactions between solvent and solute molecules are captured using the Polariz- able Continuum Model (PCM), which offers a nuanced understanding of molecular properties in solution. In our enhancement of GPU4PySCF, users can access four variants of PCM mod- els: C-PCM, COSMO, IEF-PCM, and SS(V)PE. For accurate prediction of solvation energies, accounting for non-electrostatic interactions such as cavitation, Pauli repulsion, dispersion, and hydrogen bonding is essential. These contributions are encompassed within more advanced models like SMD [27], CMIRS [66], and COSMO-RS [67] models, with the SMD model being particularly prevalent in quantum chemistry calculations and available from GPU4PySCF. The implementation of the SMD model varies slightly across different quantum chemistry soft- ware platforms. And the algorithm has been updated with minor modifications over time. Com- pared with other implementations in Q-Chem and G03, we point out several possible differences in our implementation: • The cavity surface of PCM models is smoothed using SWIG methods [68], enhancing the stability of geometry optimization and molecular dynamics simulations. • Atomic SASA, molecular SASA, and CDS contributions are calculated using the Fortran code from NWChem [69]. Those calculations are also re-implemented in Python, where atomic SASA and molecular SASA are calculated numerically using Lebedev quadrature, diverging from the analytical formulation in [70]. The difference is usually negligible for calculating the CDS contribution. • Modified Coulomb radii are employed with SMD18 [71], with newly fitted parameters that improve the accuracy of halogen bonding interactions. 14", "page": 13, "position": 0}
{"chunk_id": "2404.09452v2_p14_c0", "doc_id": "2404.09452v2", "text": "We employ the Minnesota Solvation Database – version 2012 [72] for the benchmarks. The database has been updated to version 2020 since the publication of SMD. The corresponding solvent descriptor database has been updated twice. We should take the changes into considera- tion for the following results. For neutral solutes, the error in solvation free energies consistently remains below 1 kcal/mol across various protocols (Table 3), with the errors decreasing further when employing larger basis sets or advancing up Jacob’s Ladder. These errors are comparable to those from corresponding protocols in Q-Chem and Gaussian 03. For achieving the best accuracy, a protocol employing a larger basis set and a higher-level Rung exchange-correlation functional is recommended. For ions, the overall error in solvation free energies is around 4 kcal/mol, with cases involving acetonitrile and dimethyl sulfoxide contributing significantly to this discrep- ancy. Notably, SMD calculations using Hartree-Fock generally outperform those utilizing DFT methods such as B3LYP and M06-2X, a conclusion supported by other studies [73, 74, 27]. Neutrals Ions Method Aqueous NAQ Acetonitrile DMSO Methanol Water GPU4PySCF/M06-2X/TZ 0.72 0.68 6.0 4.2 2.4 5.5 GPU4PySCF/M06-2X/6-31G* 0.74 0.65 5.9 4.6 2.1 4.8 GPU4PySCF/B3LYP/TZ 0.82 0.68 5.7 3.8 3.1 6.2 GPU4PySCF/B3LYP/6-31G* 0.94 0.70 5.8 4.3 2.5 5.4 GPU4PySCF/HF/6-31G* 0.91 0.74 6.2 5.4 3.1 3.8 Q-Chem/HF/6-31G* 0.90 0.70 5.4/4.1 2.9/3.9 G03/M05-2X/cc-pVTZ 0.68 0.67 5.9 4.4 2.3 4.6 G03/B3LYP/6-31G* 0.80 0.67 5.7 4.3 2.9 4.9 G03/HF/6-31G* 0.90 0.73 5.9 5.2 2.7 3.4 Table 3: Mean unsigned error (MUE) in solvation free energies (kcal/mol) with different pro- tocols. The detailed protocols for G03 are described in the original SMD paper [27], Table 13. The data for Q-Chem is take from [73]. In all calculations, the bulk electrostatic contribution is calculated with IEF-PCM. Density fitting is applied for all GPU4PySCF calculations. 2346 solvation free energies for neutrals and 332 solvation free energies for ions are used for G03 [27] 2368 solvation free energies for neutrals and 362 solvation free energies for ions are used for PySCF results. The uncertainty of the reference data are ± 0.2 kcal/mol for neutral solutes and ± 3 kcal/mol for ions. ‘TZ’ is", "page": 14, "position": 0}
{"chunk_id": "2404.09452v2_p14_c1", "doc_id": "2404.09452v2", "text": "contribution is calculated with IEF-PCM. Density fitting is applied for all GPU4PySCF calculations. 2346 solvation free energies for neutrals and 332 solvation free energies for ions are used for G03 [27] 2368 solvation free energies for neutrals and 362 solvation free energies for ions are used for PySCF results. The uncertainty of the reference data are ± 0.2 kcal/mol for neutral solutes and ± 3 kcal/mol for ions. ‘TZ’ is short for def2-TZVPP. ‘NAQ’ is short for nonaqueous. 3.4 Chemical Reactions 3.4.1 Transition State Search The activation energy, the energy of the transition state relative to the reactants, is a critical parameter for determining the chemical reaction rate. A higher activation energy means the fewer molecules have enough energy to react at a given temperature, leading to a slower re- action. Knowing the activation energy helps in designing and optimizing chemical processes. Transition state searches in quantum chemistry are complex and require careful planning and execution. Computational tools play an important role for finding the optimized geometries of the reactants and products, optimizing the transition state, and verifying the transition state. Those computations need a lot of computational resources for calculating SCF, gradient, and Hessian. An efficient quantum chemistry tool can accelerate the finding of the reaction pathway. Successfully finding transition states requires not just computational resources but also a deep understanding of the chemistry involved and experience with the computational methods and software. There are fully or partially automated tools [75, 76, 77] for generating reaction profiles. 15", "page": 14, "position": 1}
{"chunk_id": "2404.09452v2_p15_c0", "doc_id": "2404.09452v2", "text": "Figure 9: Activation energy (left) and reaction energy (right). ωB97M-V/def2-TZVPP: direct single-point energy calculations with the geometries in Ref. [78] using ωB97M-V functionals and def2-TZVPP basis set. ωB97M-V/def2-TZVPP//TPSS-D3(BJ)/def2-SVP: re-optimize geome- tries using the same protocols as [78] TPSS-D3(BJ)/def2-SVP and calculate the single-point energy with using ωB97M-V functionals and def2-TZVPP basis set. All the calculations employ (200,1202) grids for transition metals, (99,590) grids for other elements, and density fitting. This work does not provide the automated approaches. But one can build GPU4PySCF in the existing automated workflows. In this work, we try to reproduce the result in MOBH35 dataset [78]. For simplicity, the reactions involving bimolecular reactants or products are removed [75]. This subset of MOBH35 includes various transition metals Sc, Ti, Mn, Fe in the first row, Nb, Mo, Ru, Rh, Pd in the second row, and Ta, W, Re, Os, Ir, Pt in the third row. The transition metals are generally challenging for computation because they not only requires high-angular momentum GTO integrals, but also need ECP in the large basis set. Ref. [75] tried to modify the geometries of some reactions based on the chemical intuition. However, we are not able to verify the transition states in the modified geometries. We still use the original geometries in [78] as the initial guess for re-optimizing transition state. Both geometry optimizations and transition state optimizations are performed with geomeTRIC [79]. We benchmark the results with ωB97M-V, which is one of the best performer in MOBH35 database [78]. In the dataset, the reference energies are calculated with CCSD(T)/CBSw1 + ∆(T)/TZVPP. The barrier heights and reaction energies are presented in Fig. 9. The average absolute deviation (MAD) of the reaction energy we calculated in the subset of MOBH35 is 1.75 kcal/mol, which is similar to MAD (1.7 kcal/mol) of the entire database reported in [78]. The re-optimized transition states are almost identical to the geometries reported in [78]. The difference of the reaction energy between the original geometry and re-optimized geometries is 0.01 kcal/mol in MAD. That verifies the robustness of transition state optimization scheme. 3.4.2 Electrochemical Stability Windows of Electrolytes To", "page": 15, "position": 0}
{"chunk_id": "2404.09452v2_p16_c0", "doc_id": "2404.09452v2", "text": "lead to the reduction of the electrolyte; similarly, if a cathode’s electrochemical potential is below the oxidation potential of the electrolyte, it could oxidize the electrolyte, despite that the forma- tion of a passivation layer can prevent continuous electron transfer and mitigate these effects. A broader electrochemical window signifies a larger operational voltage range, which directly translates to higher energy density and potentially higher power output of the device [83, 84]. Thus, in the study of electrolyte in lithium-ion batteries, electrolyte’s electrochemical window directly influences the selection of solvent molecules in electrolyte for high-performance energy storage solutions. A straightforward approach to determining the electrochemical stability window of electrolytes involves calculating the gap between HOMO and LUMO [83, 84], but this method has its shortcomings [85]. Thus, our analysis adopts a more accurate thermodynamic approach to define the electrochemical stability of the electrolyte, which relies on calculating the redox potentials rather than molecular orbital gaps [82, 86, 81, 87, 88, 85]. The determination of oxidation and reduction potentials can be rigorously approached through thermodynamic cycles [86, 85]. Besides, for the evaluation of reduction potentials in particular, the introduction of Li+ ions plays a pivotal role for considering the polarization effects of Li+ on solvent molecules, which significantly influence the electrochemical behavior of the system, thereby affecting the solvent’s reduction potential [88, 82]. Thus, in this work, we consider the following oxidation and reduction reactions for some specific solvent S S →S+ + e−, (1) S + Li+ + e−→Li −S. (2) The oxidation and reaction potential potential of those reactions can be calculated as Eoxidation =(Ggas(oxidized) −Ggas(initial) + ∆Gsolv(oxidized) −∆Gsolv(initial))/F −1.44, (3) Ereduction = −(Ggas(reduced) −Ggas(initial) + ∆Gsolv(reduced) −∆Gsolv(initial))/F −1.44, (4) where Ggas is the free energy in gas of different species, such as initial, oxidized and reduced species. The solvation energy in Eq. (3) and Eq. (4) of some specific solvent S reads ∆Gsolv(S) = Esolv(S) −Egas(S), (5) approximated by the energy difference between solvation and gas phase. Subtraction of 1.44 V converses from the absolute electrochemical scale to the Li/Li+ potential scale, and the value 1.44 V is referred", "page": 16, "position": 0}
{"chunk_id": "2404.09452v2_p16_c1", "doc_id": "2404.09452v2", "text": "where Ggas is the free energy in gas of different species, such as initial, oxidized and reduced species. The solvation energy in Eq. (3) and Eq. (4) of some specific solvent S reads ∆Gsolv(S) = Esolv(S) −Egas(S), (5) approximated by the energy difference between solvation and gas phase. Subtraction of 1.44 V converses from the absolute electrochemical scale to the Li/Li+ potential scale, and the value 1.44 V is referred to Ref. [82] for comparisons. In our study, we calculated the redox potentials of some molecules reported in Ref. [82], and compared our results with those previously reported in the same reference. It should be noted that our calculations were performed using a thermodynamic cycle, with computational param- eters that slightly differ from those used in Ref. [82]. As shown in Figure 10, despite differences in the computational approach and parameters from those described in the original literature, the results obtained are remarkably similar. Consequently, we posit that the package possesses the capability to calculate redox potentials, thereby enabling the prediction of electrochemical windows. Considering the computational efficiency, oxidation and reduction potential calcula- tions involves the optimization of geometric structures in vacuum and solvent, as well as the calculation of Hessian in vacuum. The computational acceleration using GPU4PySCF with re- spect to Q-Chem for these processes has been discussed in previous sections. Consequently, the 17", "page": 16, "position": 1}
{"chunk_id": "2404.09452v2_p17_c0", "doc_id": "2404.09452v2", "text": "acceleration ratio for the calculation of oxidation-reduction potential is determined by the lowest acceleration ratio among these individual parts. Figure 10: Electrochemical stability windows calculated by GPU4PySCF (blue bars) and from Ref. [82] (red bars). It should be noted that the largest discrepancy lies in the reduction potential of the DMK molecule. Using the same structure and calculation method as Ref. [82], we get 0.55 V, which differs from the reported results. Computational details are the same as in section 3.1.3. 3.4.3 Fukui Function, Condensed Fukui Function and ESP In chemical reaction research, determining the most reactive site on a compound is crucial. Typically, organic chemists make judgments based on knowledge and experience, but quantum chemistry calculations can also be helpful. The widely-used Fukui function [89, 90] predicts reactive sites and comprises three types: f +, f −, and f 0, for nucleophilic, electrophilic, and radical attacks, respectively. In most applications, the Fukui function is calculated by the finite difference formula [91]. It requires calculations for neutral (N electrons), cationic (N-1 electrons), and anionic (N+1 electrons) states and analyzing the electron density difference. Regions with larger Fukui function values imply greater reactivity at this site. The condensed Fukui function uses atomic charges to evaluate the reactivity of individual atoms in a molecule more intuitively [92]. By calculating atomic charges for N, N-1, and N+1 electron states, differences between states can be obtained for each atom, enabling reactivity comparisons. For example, consider an electrophilic aromatic substitution using Anisole to examine the orien- tational effect of the directing group. After optimizing the initial structure for the neutral state, single point calculations are performed for N, N-1, and N+1 electron states at the B3LYP/def2- TZVPP level. The Fukui function is obtained from electron density differences in different states and saved to *.cub files, which can be visualized using the open-source tool VMD [93]. Finally, 18", "page": 17, "position": 0}
{"chunk_id": "2404.09452v2_p18_c0", "doc_id": "2404.09452v2", "text": "the condensed Fukui function is calculated using CHELPG atomic charges [55]. Figure 11: The f −Fukui function isosurface (isolevel 0.008) of Anisole is shown in blue, and the condensed f −values are marked near the corresponding carbon atoms. As the study concentrates on electrophilic substitution sites, only the f −function is relevant. As shown in Figure 11, the f −isosurface (isolevel 0.008) occurs mainly on the ortho- and para-position carbon atoms, and less in the meta-position. The condensed Fukui function values also suggest that ortho and para carbon atoms with higher f −values are more susceptible to electrophilic substitution reactions. This result is consistent with organic chemistry knowledge that the -OCH3 group is an ortho, para director. The electrostatic potential (ESP) is a commonly used real-space function that provides impor- tant information about the interaction sites of compounds. It helps understand the anisotropic distribution of charges on the molecular surface, thereby assisting in inferring possible reac- tion sites. The wave function obtained from the single-point calculation of compounds using GPU4PySCF can be further exported as the ESP’s *.cub file, which can also be visualized using VMD. The color map of the electrostatic potential for Anisole on the electron density isosurface (rho=0.001) is displayed in Figure 12. 3.5 Incorporating with Neural Networks Recently, the application of machine learning has been extended to the quantum chemistry com- munity [94, 95], demonstrating substantial potential to address quantum mechanic problems. The traditional quantum chemistry techniques are still important ingredients of the recipe. Cur- rently, most researchers employ the PySCF routines for accessing the quantum chemistry calcu- lations. This work further offers the same functionalities with GPU acceleration, which is crucial as most deep learning models are running on GPU. We take Fermionic neural networks [96, 97, 94] as an example. The main philosophy of this research realm, namely neural network-based Quantum Monte Carlo, is to learn highly accu- rate ground state wavefunctions using a variational Monte Carlo approach. For this approach, 19", "page": 18, "position": 0}
{"chunk_id": "2404.09452v2_p19_c0", "doc_id": "2404.09452v2", "text": "Figure 12: ESP color map for Anisole on the electron density isosurface (rho=0.001). atomic orbital (AO) evaluation is an important component that encapsulates traditional chem- istry knowledge. Specifically, utilizing the Hartree-Fock AO to ‘pretrain’ neural networks is a common strategy in this research area, as introduced in [94]. This process guides the networks to an acceptable initial state, after which they evolve based on variational principles. However, AO evaluation, invoked at every ‘pretraining’ step, is typically executed on CPUs, which quickly becomes the computational bottleneck of the whole process. Another factor contributing to the inefficiency of this implementation is substantial data transfer between CPU memory and GPU memory, especially for large systems. With GPU4PySCF developed, AO evaluation can be efficiently performed on GPUs and achieves a hundredfold speed improvement as shown in Fig. 13. Furthermore, GPU4PySCF can be effortlessly integrated with existing neural network frameworks within quantum chemistry and manifest significant acceleration. For instance, by integrating Lap- Net [98] with GPU4PySCF, we achieved approximately three times faster pretraining on Benzene molecule. Beyond pretraining, GPU4PySCF also enables researchers to design and implement neural network wavefunction ansatzes that incorporate traditional chemistry knowledge, like AO, to better characterize the desired quantum state. 20", "page": 19, "position": 0}
{"chunk_id": "2404.09452v2_p21_c0", "doc_id": "2404.09452v2", "text": "4 Compatibility and Functionalities As an open-source Python library, PySCF has been widely adopted in quantum computing, deep learning, and various quantum chemistry workflows, most of which extensively utilize GPU acceleration. In this section, we introduce improvements to the interfaces and outline the func- tionalities that have been accelerated. With minimal code changes, these tasks can be sped up using GPU4PySCF v1.0. 4.1 Improved Compatibility with PySCF The compatibility between PySCF and GPU4PySCF has been enhanced by the newly designed API in this work. Previously, all GPU4PySCF classes inherited from PySCF classes, with methods patched to use GPU functions. As more functionalities were added, the multiple inheritance design leads to many ambiguous situations when the features are defined in both PySCF and GPU4PySCF. The ambiguity increases the complexity of development dramatically. Starting from v1.0, GPU4PySCF drops the patching mechanism and explicitly redefines the same classes as in PySCF. GPU4PySCF classes and PySCF classes are constructed in parallel. A PySCF object can be converted into a GPU4PySCF object with calling to_gpu function when the functionality is implemented on GPU. The kernel execution will be accelerated with GPU. Conversely, a GPU4PySCF object can be converted back into a PySCF object using the to_cpu function, allowing PySCF-only features to be applied. Here is an example 1 import pyscf 2 from pyscf import lib 3 from pyscf.dft import rks 4 5 atom = ’’’ 6 O 0.0000000000 -0.0000000000 0.1174000000 7 H -0.7570000000 -0.0000000000 -0.4696000000 8 H 0.7570000000 0.0000000000 -0.4696000000 9 ’’’ 10 11 mol = pyscf.M(atom=atom , basis=’sto3g ’) 12 mol.verbose = 4 13 mf = rks.RKS(mol , xc=’b3lyp ’). density_fit () 14 15 # Move PySCF object to GPU 16 mf_GPU = mf.to_gpu () 17 18 # Compute Energy on GPU 19 e_dft = mf_GPU.kernel () 20 21 # Compute Gradient 22 g = mf_GPU. nuc_grad_method () 23 g_dft = g.kernel () 24 25 # Compute Hessian on GPU 26 h = mf_GPU.Hessian () 27 h. auxbasis_response = 2 28 h_dft = h.kernel () Listing 1: Example of PySCF with GPU support. The code changes from CPU to GPU are colored in red.", "page": 21, "position": 0}
{"chunk_id": "2404.09452v2_p22_c0", "doc_id": "2404.09452v2", "text": "are seamlessly applicable in GPU4PySCF. For example, consider DFT calculations. We have conducted benchmarks on SCF energy, gradient, and Hessian calculations for the wa- ter molecule using well-established exchange-correlation functionals across Rungs 2-4 of Jacob’s Ladder [99]. For all examined exchange-correlation functionals, the discrepancies in energy rela- tive to PySCF calculations are less than 10−11 Ha, falling below the SCF convergence threshold of 10−10. Moreover, the 2-norm differences for gradients and Hessians are below 10−7 Ha/Bohr and 10−6 Ha/Bohr2, respectively, demonstrating exceptional accuracy and consistency with PySCF. The large differences in range-separated functionals are due to solving ill-conditioned linear system in density fitting. Figure 14: 2-norm of the differences between PySCF and calculations with different DFT func- tionals for H2O molecule, grids level = 5, def2-QZVPP atomic basis, def2-universal-JKFIT auxiliary basis, convergence tolerance = 10−12. Different units (Ha for energy, Ha/Bohr for gradient, and Ha/Bohr2 for Hessian) are used in y-axis. 4.2 Accelerated Functionalities Practical DFT calculations not only involve the contributions of foundational DFT but also ad- vanced features such as dispersion correction, solvent effect, ECP, and etc. Those contributions are essential to accurately model the electronic structure. This study adheres to a principle of utilizing existing open-source implementations for these advanced features wherever possible. In scenarios where these implementations are either non-existent or inadequate, we undertake the redevelopment of these features, emphasizing the enhancement of computational efficiency through GPU acceleration, particularly for processes that exhibit slower performance than SCF iterations. Dispersion corrections are usually much cheaper than DFT self-consistent iterations. And these contributions are calculated with dftd3/simple-dftd3 and dftd4/dftd4 packages without GPU 23", "page": 22, "position": 0}
{"chunk_id": "2404.09452v2_p23_c0", "doc_id": "2404.09452v2", "text": "acceleration. Although DFT-D3 has been implemented in Torch and Jax, these implementations will introduce the dependencies of heavy-weight machine learning framework. For robustness, we rebuild simple-dftd3 and dftd4, and disable OpenMP. The same interfaces are used in both PySCF and GPU4PySCF. Nonlocal corrections are carefully optimized at CUDA level due to its expensive computational cost. PCM/SMD solvent models require solving Poisson-Boltzmann equation in each SCF iteration. The computational complexity of solving Poisson-Boltzmann equation is cubic-scaling with re- spect to the number of grids on molecular surface. Although it is cheaper than the quartic-scaling hybrid DFTs, it would be the bottleneck without GPU acceleration. To address this, we have re-engineered the PCM/SMD solvent models for GPU execution using Python, recognizing the potential need for further optimizations to minimize the memory requirements. To maintain the compatibility with PySCF we also introduced PCM/SMD solvent models in PySCF v2.4 and added nuclear Hessian in PySCF v2.6. ECP contributions are calculated only once in SCF. We reuse PySCF routines on CPU to calculate the ECP contributions in SCF, gradient, and Hessian. Other contributions of DFT are still accelerated with GPU for a molecular system with ECP. The computational cost is acceptable if the system only has a few heavy atoms. We leave the GPU acceleration of ECP as future work. The functionalities are summarized in the Table 4. Method SCF Gradient Hessian direct SCF [20] O O CPU density fitting O O O LDA O O O GGA O O O mGGA O O O hybrid O O O unrestricted O O O PCM solvent GPU GPU FD SMD solvent GPU GPU FD dispersion correction CPU* CPU* FD nonlocal correlation O O NA ECP CPU CPU CPU MP2 GPU CPU CPU CCSD GPU CPU NA Table 4: A summary of GPU4PySCF functionalities and level of optimizations. ‘O’: carefully optimized for GPU. ‘CPU’: only cpu implementation. ‘GPU’: drop-in replacement or na¨ıve implementation. ‘FD’: use finite-difference gradient to approximate the exact Hessian matrix. ’NA’: not available. ‘CPU*’: DFTD3 [100]/DFTD4 [101] on CPU. 4.3 Improved Interfaces to External Libraries One of the advantages that we have benefited from", "page": 23, "position": 0}
{"chunk_id": "2404.09452v2_p24_c0", "doc_id": "2404.09452v2", "text": "on BSE [14] (basis set exchange for newly developed basis set), GeomeTRIC [79] (geometric op- timization and transition state search), DFTD3 [100]/DFTD4 [101] (dispersion corrections) and Libcint [102] (fundamental GTO integrals), our work in GPU4PySCF has benefited extensively from the CUDA ecosystem: • CuPy [103], a drop-in replacement for NumPy & SciPy for GPU. • CUDA LibXC. CUDA support is still experimental in the latest version of libXC (v6.2). In this work, the exchange-correlation potentials and their derivatives are evaluated on the GPU using a customized Python API. • cuTENSOR. cuTENSOR is used as the default tensor contraction engine. It takes the advantage of tensor cores, and provides convenient tensor operations on NVIDIA GPUs. Other tensor contraction packages, such as opt einsum [104] and cuquantum [105] are also supported. 5 Limitations and Future Development Quantum chemistry is a field characterized by its complex algorithms and significant computa- tional demands. Accelerated computing technologies, such as GPUs, offer promising ways to tackle these challenges, yet their adoption in quantum chemistry has been slower than in other areas. With our many contributions to the GPU4PySCF package, we can now deliver significant speedup for various tasks. As demonstrated through our applications, GPU4PySCF can now be applied in many different practical settings, bringing the full power of GPUs to bear on a large part of quantum chemistry modeling. We can thus recommend GPU4PySCF as a powerful module for the PySCF ecosystem in industrial applications. At the same time, our implementations are certainly not optimal and there are many current limitations. As dedicated stakeholders in this project, we outline our vision on some of the important future developments to further enhance the capabilities of this package. Wavefunction-based Methods. Beyond traditional mean-field methods, sophisticated wavefunction- based techniques like MP2/RI-MP2 and CCSD(T)/DF-CCSD(T) have seen successful optimiza- tion for GPU processing. Our work in GPU4PySCF includes preliminary implementations for MP2 and CCSD methods, demonstrating the feasibility and benefits of using GPUs for these compu- tationally intensive tasks. References such as [106, 107, 108] for MP2/RI-MP2 and [109, 110] for CCSD(T)/DF-CCSD(T) highlight the ongoing efforts and achievements in this area.", "page": 24, "position": 0}
{"chunk_id": "2404.09452v2_p24_c1", "doc_id": "2404.09452v2", "text": "Wavefunction-based Methods. Beyond traditional mean-field methods, sophisticated wavefunction- based techniques like MP2/RI-MP2 and CCSD(T)/DF-CCSD(T) have seen successful optimiza- tion for GPU processing. Our work in GPU4PySCF includes preliminary implementations for MP2 and CCSD methods, demonstrating the feasibility and benefits of using GPUs for these compu- tationally intensive tasks. References such as [106, 107, 108] for MP2/RI-MP2 and [109, 110] for CCSD(T)/DF-CCSD(T) highlight the ongoing efforts and achievements in this area. Direct SCF & Other Integral Schemes. The Direct Self-Consistent Field (SCF) method has been particularly explored for GPU acceleration due to its minimal memory requirements and scalability with system size, especially when screening techniques are applied. The efficiency of Direct SCF is largely dependent on the integral computation strategy. As described in Ref. [20] the start of the GPU4PySCF project was built around Direct SCF using a Rys quadrature scheme to compute the 4-center two-electron integrals. The Rys quadrature scheme was selected mainly because of its simplicity for implementing various operators and derivatives. In future work, it may be worth revisiting the integral scheme for direct SCF calculations. Periodic Boundary Conditions (PBC). The PBC module in PySCF extends its capabilities to simulate extended systems using Gaussian basis sets. The main challenges in PBC calculations can be attributed to the infinite number of repeated images caused by periodicity. This leads to high computational costs and numerical instability. Although sophisticated integral screening 25", "page": 24, "position": 1}
{"chunk_id": "2404.09452v2_p25_c0", "doc_id": "2404.09452v2", "text": "and evaluation schemes have been implemented in the CPU code, their techniques may not be directly transferable to GPU-based programs. New techniques are under development to refine integral screening and evaluation for GPU-optimized PBC simulations, as mentioned in [111]. Multi-GPUs. The advent of data-center GPUs equipped with multi-GPU configurations signif- icantly enhances data transfer speeds via technologies like NVIDIA’s NVLink or AMD’s xGMI, offering a substantial improvement over traditional CPU-GPU data transfer rates. This technique not only accelerates the computation of quantum chemistry problems but also enables the effi- cient handling of tasks that require large amounts of GPU memory. Multi-GPU implementations perhaps can achieve greater parallel efficiency than 100% for large molecules. Mixed Precision. The mixed-precision computing approach capitalizes on the differential com- putational capabilities of GPUs, balancing single and double precision to optimize performance without compromising accuracy. In the context of Direct SCF algorithms, error estimation via Schwarz inequality allows for the strategic use of precision levels. This technique reduces com- putational overhead by performing most calculations in single precision in later SCF iterations. Such strategies, as investigated in [112, 113], showcase the ongoing innovation in leveraging GPU capabilities to improve quantum chemistry computations, focusing on maximizing performance and computational efficiency. Low-level Integration with other PySCF-based Packages. Due to fundamental differences between the underlying CPU algorithms and their corresponding GPU algorithms, the low-level APIs of PySCF and GPU4PySCF are not fully compatible. As a result, packages relying on low- level PySCF APIs cannot be directly accelerated with GPU4PySCF. Additionally, we are aware of other groups working on PySCF-based GPU implementations. Other designs could use JAX or Torch as the linear algebra backend. Defining the interfaces between these packages remains an area of active exploration. Acknowledgements The authors would like to thank the organizers of the 1st annual PySCF Developers Meeting. The initial results for GPU acceleration of PySCF were presented at that meeting by Dr. Qiming Sun before the public release of the GPU4PySCF repository. The authors thank all the attendees for their discussions. After the meeting, Dr. Garnet Chan and Dr. Qiming Sun initiated the public GPU4PySCF", "page": 25, "position": 0}
{"chunk_id": "2404.09452v2_p25_c1", "doc_id": "2404.09452v2", "text": "remains an area of active exploration. Acknowledgements The authors would like to thank the organizers of the 1st annual PySCF Developers Meeting. The initial results for GPU acceleration of PySCF were presented at that meeting by Dr. Qiming Sun before the public release of the GPU4PySCF repository. The authors thank all the attendees for their discussions. After the meeting, Dr. Garnet Chan and Dr. Qiming Sun initiated the public GPU4PySCF repository onGitHub, and the Caltech team developed the GPU accelerated 4-center GTO integrals and direct SCF scheme that formed the initial version of GPU4PySCF. This initial version is described further in Ref. [20]. The authors also would like to thank Dr. John Herbert from The Ohio State University for providing the implementation details of CHELPG charge in Q-Chem 6.1. Author Contributions Xiaojie Wu and Qiming Sun designed the framework and APIs in this work; built CI; analyzed the performance; conceptualized the paper and planned the application projects. Qiming Sun contributed this work when he worked as an independent researcher. Xiaojie Wu optimized the framework of DFT; implemented density fitting, gradient, Hessian, and solvent models; performed benchmarks of DF modules with calculating solvation free energy, transition state search. Zhichen Pu developed open-shell HF/DFT, CHELPG charge, and NMR. Tianze Zheng and Wen Yan performed the applications in torsion scan and dimer interaction energies. Wenzhi 26", "page": 25, "position": 1}
{"chunk_id": "2404.09452v2_p29_c0", "doc_id": "2404.09452v2", "text": "Molecule names Energy Gradient Hessian Vitamin C 6.31E-07 2.52E-05 9.24E-04 Inosine 1.25E-05 2.61E-05 9.82E-04 Bisphenol A 9.31E-07 4.68E-05 9.89E-04 Mg Porphin 7.19E-06 3.15E-05 9.59E-04 Penicillin V 3.71E-05 8.31E-05 1.52E-03 Ochratoxin A 3.06E-05 5.06E-05 1.50E-03 Cetirizine 2.26E-05 8.67E-05 2.93E-03 Tamoxifen 1.73E-05 6.38E-05 1.27E-03 Raffinose 5.60E-05 1.32E-04 2.13E-03 Sphingomyelin 4.12E-05 8.31E-05 3.13E-03 Table 10: Difference between GPU4PySCF and Q-Chem 6.1, using def2-SVP basis. Molecule names Energy Gradient Hessian Vitamin C 5.55E-07 2.74E-05 1.04E-03 Inosine 8.17E-07 2.76E-05 9.62E-04 Bisphenol A 4.61E-06 5.21E-05 1.17E-03 Mg Porphin 8.28E-06 3.82E-05 1.20E-03 Penicillin V 1.86E-06 8.76E-05 1.69E-03 Ochratoxin A 7.67E-06 6.80E-05 1.77E-03 Cetirizine 8.40E-06 9.09E-05 3.56E-03 Tamoxifen 4.77E-06 7.09E-05 1.29E-03 Raffinose 6.43E-06 1.62E-04 2.22E-03 Sphingomyelin 1.52E-05 9.50E-05 3.28E-03 Table 11: Difference between GPU4PySCF and Q-Chem 6.1, using def2-TZVPP basis set. Molecule names Energy Gradient Hessian Vitamin C 5.23E-07 2.79E-05 1.04E-03 Inosine 9.11E-07 2.75E-05 9.63E-04 Bisphenol A 4.78E-06 5.23E-05 1.17E-03 Mg Porphin 8.28E-06 3.83E-05 1.21E-03 Penicillin V 4.23E-06 8.74E-05 1.70E-03 Ochratoxin A 3.08E-06 6.81E-05 1.77E-03 Cetirizine 6.85E-06 9.10E-05 3.56E-03 Tamoxifen 3.36E-06 7.12E-05 1.29E-03 Raffinose 2.57E-06 1.61E-04 2.22E-03 Sphingomyelin 6.98E-06 9.57E-05 3.29E-03 Table 12: Difference between GPU4PySCF and Q-Chem 6.1, using def2-TZVPD basis set. 30", "page": 29, "position": 0}
{"chunk_id": "2404.09452v2_p30_c0", "doc_id": "2404.09452v2", "text": "D Accuracy for Solvent Models All of the following calculations are using B3LYP, def2-TZVPP, def2-universal-JKFIT, (99,590) grids. The energy, gradient, and Hessian difference are measured in 2-norm. The corresponding units are Hartree, Hartree/Bohr and Hartree/Bohr2. Since Q-Chem 6.1 do not support PCM models for the density fitting scheme, we use the regular SCF scheme as the reference. The following tables reflects the density fitting errors. Molecule names Energy Gradient Hessian Vitamin C 1.38E-04 1.20E-04 1.14E-03 Inosine 2.08E-04 1.39E-04 1.18E-03 Bisphenol A 1.99E-04 1.78E-04 1.36E-03 Mg Porphin 1.40E-04 1.35E-04 1.33E-03 Table 13: Difference between GPU4PySCF and Q-Chem 6.1, using C-PCM solvent model. Molecule names Energy Gradient Hessian Vitamin C 1.38E-04 1.20E-04 1.14E-03 Inosine 2.08E-04 1.39E-04 1.18E-03 Bisphenol A 1.99E-04 1.78E-04 1.36E-03 Mg Porphin 1.40E-04 1.35E-04 1.33E-03 Table 14: Difference between GPU4PySCF and Q-Chem 6.1, using IEF-PCM solvent model References [1] Ivan S. Ufimtsev and Todd J. Mart´ınez. Quantum chemistry on graphical processing units. 1. strategies for two-electron integral evaluation. Journal of Chemical Theory and Computation, 4(2):222–231, 2008. PMID: 26620654. [2] Koji Yasuda. Two-electron integral evaluation on the graphics processor unit. Journal of Computational Chemistry, 29(3):334–342, 2008. [3] Giuseppe M. J. Barca, Colleen Bertoni, Laura Carrington, Dipayan Datta, Nuwan De Silva, J. Emiliano Deustua, Dmitri G. Fedorov, Jeffrey R. Gour, Anastasia O. Gunina, Emi- lie Guidez, Taylor Harville, Stephan Irle, Joe Ivanic, Karol Kowalski, Sarom S. Leang, Hui Li, Wei Li, Jesse J. Lutz, Ilias Magoulas, Joani Mato, Vladimir Mironov, Hiroya Nakata, Buu Q. Pham, Piotr Piecuch, David Poole, Spencer R. Pruitt, Alistair P. Rendell, Luke B. Roskop, Klaus Ruedenberg, Tosaporn Sattasathuchana, Michael W. Schmidt, Jun Shen, Lyudmila Slipchenko, Masha Sosonkina, Vaibhav Sundriyal, Ananta Tiwari, Jorge L. Galvez Vallejo, Bryce Westheimer, Marta Wloch, Peng Xu, Federico Zahariev, and Mark S. Gordon. Recent developments in the general atomic and molecular electronic structure system. The Journal of Chemical Physics, 152(15):154102, April 2020. [4] Federico Zahariev, Peng Xu, Bryce M. Westheimer, Simon Webb, Jorge Galvez Vallejo, Ananta Tiwari, Vaibhav Sundriyal, Masha Sosonkina, Jun Shen, George Schoendorff, Megan Schlinsog, Tosaporn Sattasathuchana, Klaus Ruedenberg, Luke B. Roskop, Al- istair P. Rendell, David Poole, Piotr Piecuch, Buu Q.", "page": 30, "position": 0}
{"chunk_id": "2404.09452v2_p31_c0", "doc_id": "2404.09452v2", "text": "Mato, Sam Leonard, Sarom S. Leang, Joe Ivanic, Jackson Hayes, Taylor Harville, Karthik Gururangan, Emilie Guidez, Igor S. Gerasimov, Christian Friedl, Katherine N. Ferreras, George Elliott, Dipayan Datta, Daniel Del Angel Cruz, Laura Carrington, Colleen Bertoni, Giuseppe M. J. Barca, Melisa Alkan, and Mark S. Gordon. The general atomic and molec- ular electronic structure system (gamess): Novel methods on novel architectures. Journal of Chemical Theory and Computation, 19(20):7031–7055, 2023. PMID: 37793073. [5] Evgeny Epifanovsky, Andrew TB Gilbert, Xintian Feng, Joonho Lee, Yuezhi Mao, Narbe Mardirossian, Pavel Pokhilko, Alec F White, Marc P Coons, Adrian L Dempwolff, et al. Software for the frontiers of quantum chemistry: An overview of developments in the q-chem 5 package. The Journal of chemical physics, 155(8), 2021. [6] Daniel G. A. Smith, Lori A. Burns, Andrew C. Simmonett, Robert M. Parrish, Matthew C. Schieber, Raimondas Galvelis, Peter Kraus, Holger Kruse, Roberto Di Remigio, Asem Ale- naizan, Andrew M. James, Susi Lehtola, Jonathon P. Misiewicz, Maximilian Scheurer, Robert A. Shaw, Jeffrey B. Schriber, Yi Xie, Zachary L. Glick, Dominic A. Sirianni, Joseph Senan O’Brien, Jonathan M. Waldrop, Ashutosh Kumar, Edward G. Hohenstein, Benjamin P. Pritchard, Bernard R. Brooks, III Schaefer, Henry F., Alexander Yu. Sokolov, Konrad Patkowski, III DePrince, A. Eugene, U˘gur Bozkaya, Rollin A. King, Francesco A. Evangelista, Justin M. Turney, T. Daniel Crawford, and C. David Sherrill. PSI4 1.4: Open- source software for high-throughput quantum chemistry. The Journal of Chemical Physics, 152(18):184108, 05 2020. [7] ´Ad´am R´ak and Gy¨orgy Cserey. The brush algorithm for two-electron integrals on gpu. Chemical Physics Letters, 622:92–98, 2015. [8] G´abor J´anos Tornai, Istv´an Ladj´anszki, ´Ad´am R´ak, Gergely Kis, and Gy¨orgy Cserey. Cal- culation of quantum chemical two-electron integrals by applying compiler technology on gpu. Journal of Chemical Theory and Computation, 15(10):5319–5331, 2019. PMID: 31503475. [9] Stefan Seritan, Christoph Bannwarth, B. Scott Fales, Edward G. Hohenstein, Sara I. L. Kokkila-Schumacher, Nathan Luehr, Jr. Snyder, James W., Chenchen Song, Alexey V. Titov, Ivan S. Ufimtsev, and Todd J. Mart´ınez. TeraChem: Accelerating electronic struc- ture and ab initio molecular dynamics with graphical processing units. The Journal of Chemical Physics, 152(22):224110, 06 2020. [10]", "page": 31, "position": 0}
{"chunk_id": "2404.09452v2_p32_c0", "doc_id": "2404.09452v2", "text": "[13] Madushanka Manathunga, Chi Jin, Vin´ıcius Wilian D. Cruzeiro, Yipu Miao, Dawei Mu, Kamesh Arumugam, Kristopher Keipert, Hasan Metin Aktulga, Kenneth M. Jr. Merz, and Andreas W. G¨otz. Harnessing the power of multi-gpu acceleration into the quantum interaction computational kernel program. Journal of Chemical Theory and Computation, 17(7):3955–3966, 2021. PMID: 34062061. [14] Benjamin P. Pritchard, Doaa Altarawy, Brett Didier, Tara D. Gibson, and Theresa L. Windus. New basis set exchange: An open, up-to-date resource for the molecular sciences community. Journal of Chemical Information and Modeling, 59(11):4814–4820, 2019. PMID: 31600445. [15] Susi Lehtola, Conrad Steigemann, Micael JT Oliveira, and Miguel AL Marques. Recent developments in libxc—a comprehensive library of functionals for density functional theory. SoftwareX, 7:1–5, 2018. [16] Stefan Grimme, Jan Gerit Brandenburg, Christoph Bannwarth, and Andreas Hansen. Con- sistent structures and interactions by density functional theory with small atomic orbital basis sets. The Journal of Chemical Physics, 143(5):054107, 08 2015. [17] Marcel M uller, Andreas Hansen, and Stefan Grimme. ω B97X-3c: A composite range- separated hybrid DFT method with a molecule-optimized polarized valence double-ζ basis set. The Journal of Chemical Physics, 158(1):014103, 01 2023. [18] Stefan Grimme, Andreas Hansen, Sebastian Ehlert, and Jan-Michael Mewes. r2SCAN-3c: A “Swiss army knife” composite electronic-structure method. The Journal of Chemical Physics, 154(6):064103, 02 2021. [19] Qiming Sun, Xing Zhang, Samragni Banerjee, Peng Bao, Marc Barbry, Nick S. Blunt, Niko- lay A. Bogdanov, George H. Booth, Jia Chen, Zhi-Hao Cui, Janus J. Eriksen, Yang Gao, Sheng Guo, Jan Hermann, Matthew R. Hermes, Kevin Koh, Peter Koval, Susi Lehtola, Zhendong Li, Junzi Liu, Narbe Mardirossian, James D. McClain, Mario Motta, Bastien Mussard, Hung Q. Pham, Artem Pulkin, Wirawan Purwanto, Paul J. Robinson, Enrico Ronca, Elvira R. Sayfutyarova, Maximilian Scheurer, Henry F. Schurkus, James E. T. Smith, Chong Sun, Shi-Ning Sun, Shiv Upadhyay, Lucas K. Wagner, Xiao Wang, Alec White, James Daniel Whitfield, Mark J. Williamson, Sebastian Wouters, Jun Yang, Ja- son M. Yu, Tianyu Zhu, Timothy C. Berkelbach, Sandeep Sharma, Alexander Yu. Sokolov, and Garnet Kin-Lic Chan. Recent developments in the PySCF program package. The Jour- nal of Chemical Physics, 153(2):024109, 07 2020. [20] Rui Li,", "page": 32, "position": 0}
{"chunk_id": "2404.09452v2_p32_c1", "doc_id": "2404.09452v2", "text": "Sayfutyarova, Maximilian Scheurer, Henry F. Schurkus, James E. T. Smith, Chong Sun, Shi-Ning Sun, Shiv Upadhyay, Lucas K. Wagner, Xiao Wang, Alec White, James Daniel Whitfield, Mark J. Williamson, Sebastian Wouters, Jun Yang, Ja- son M. Yu, Tianyu Zhu, Timothy C. Berkelbach, Sandeep Sharma, Alexander Yu. Sokolov, and Garnet Kin-Lic Chan. Recent developments in the PySCF program package. The Jour- nal of Chemical Physics, 153(2):024109, 07 2020. [20] Rui Li, Qiming Sun, Xing Zhang, and Garnet Kin-Lic Chan. Introducing gpu-acceleration into the python-based simulations of chemistry framework, 2024. [21] Eric D. Hermes, Khachik Sargsyan, Habib N. Najm, and Judit Z´ador. Geometry opti- mization speedup through a geodesic approach to internal coordinates. The Journal of Chemical Physics, 155(9):094105, 09 2021. [22] Philipp Pracht, David F. Grant, and Stefan Grimme. Comprehensive assessment of gfn tight-binding and composite density functional theory methods for calculating gas-phase infrared spectra. Journal of Chemical Theory and Computation, 16(11):7044–7060, 2020. PMID: 33054183. [23] Christopher A. White and Martin Head-Gordon. A J matrix engine for density functional theory calculations. The Journal of Chemical Physics, 104(7):2620–2629, 02 1996. 33", "page": 32, "position": 1}
{"chunk_id": "2404.09452v2_p33_c0", "doc_id": "2404.09452v2", "text": "[24] Maurizio Cossi, Nadia Rega, Giovanni Scalmani, and Vincenzo Barone. Energies, struc- tures, and electronic properties of molecules in solution with the c-pcm solvation model. Journal of Computational Chemistry, 24(6):669–681, 2003. [25] Vincenzo Barone and Maurizio Cossi. Quantum calculation of molecular energies and en- ergy gradients in solution by a conductor solvent model. The Journal of Physical Chemistry A, 102(11):1995–2001, 1998. [26] E. Canc´es, B. Mennucci, and J. Tomasi. A new integral equation formalism for the polarizable continuum model: Theoretical background and applications to isotropic and anisotropic dielectrics. The Journal of Chemical Physics, 107(8):3032–3041, 08 1997. [27] Aleksandr V. Marenich, Christopher J. Cramer, and Donald G. Truhlar. Universal solvation model based on solute electron density and on a continuum model of the solvent defined by the bulk dielectric constant and atomic surface tensions. The Journal of Physical Chemistry B, 113(18):6378–6396, 2009. PMID: 19366259. [28] Simon Boothroyd, Pavan Kumar Behara, Owen C. Madin, David F. Hahn, Hyesu Jang, Vytautas Gapsys, Jeffrey R. Wagner, Joshua T. Horton, David L. Dotson, Matthew W. Thompson, Jessica Maat, Trevor Gokey, Lee-Ping Wang, Daniel J. Cole, Michael K. Gilson, John D. Chodera, Christopher I. Bayly, Michael R. Shirts, and David L. Mobley. Devel- opment and benchmarking of open force field 2.0.0: The sage small molecule force field. Journal of Chemical Theory and Computation, May 2023. [29] Joshua T. Horton, Simon Boothroyd, Jeffrey Wagner, Joshua A. Mitchell, Trevor Gokey, David L. Dotson, Pavan Kumar Behara, Venkata Krishnan Ramaswamy, Mark Mackey, John D. Chodera, Jamshed Anwar, David L. Mobley, and Daniel J. Cole. Open force field bespokefit: Automating bespoke torsion parametrization at scale. Journal of Chemical Information and Modeling, 62(22):5622–5633, November 2022. [30] Yudong Qiu, Daniel G. A. Smith, Chaya D. Stern, Mudong Feng, Hyesu Jang, and Lee- Ping Wang. Driving torsion scans with wavefront propagation. The Journal of Chemical Physics, 152(24):244116, June 2020. [31] Yudong Qiu, Daniel G. A. Smith, Simon Boothroyd, Hyesu Jang, David F. Hahn, Jef- frey Wagner, Caitlin C. Bannan, Trevor Gokey, Victoria T. Lim, Chaya D. Stern, Andrea Rizzi, Bryon Tjanaka, Gary Tresadern, Xavier Lucas, Michael R. Shirts, Michael K. Gilson, John D.", "page": 33, "position": 0}
{"chunk_id": "2404.09452v2_p33_c1", "doc_id": "2404.09452v2", "text": "Smith, Chaya D. Stern, Mudong Feng, Hyesu Jang, and Lee- Ping Wang. Driving torsion scans with wavefront propagation. The Journal of Chemical Physics, 152(24):244116, June 2020. [31] Yudong Qiu, Daniel G. A. Smith, Simon Boothroyd, Hyesu Jang, David F. Hahn, Jef- frey Wagner, Caitlin C. Bannan, Trevor Gokey, Victoria T. Lim, Chaya D. Stern, Andrea Rizzi, Bryon Tjanaka, Gary Tresadern, Xavier Lucas, Michael R. Shirts, Michael K. Gilson, John D. Chodera, Christopher I. Bayly, David L. Mobley, and Lee-Ping Wang. Develop- ment and benchmarking of open force field v1.0.0—the parsley small-molecule force field. Journal of Chemical Theory and Computation, 17(10):6262–6280, October 2021. [32] Katarina Roos, Chuanjie Wu, Wolfgang Damm, Mark Reboul, James M. Stevenson, Chao Lu, Markus K. Dahlgren, Sayan Mondal, Wei Chen, Lingle Wang, Robert Abel, Richard A. Friesner, and Edward D. Harder. Opls3e: Extending force field coverage for drug-like small molecules. Journal of Chemical Theory and Computation, 15(3):1863–1874, March 2019. [33] Junmei Wang, Romain M. Wolf, James W. Caldwell, Peter A. Kollman, and David A. Case. Development and testing of a general amber force field. Journal of Computational Chemistry, 25(9):1157–1174, 2004. [34] Bai Xue, Qingyi Yang, Qiaochu Zhang, Xiao Wan, Dong Fang, Xiaolu Lin, Guangxu Sun, Gianpaolo Gobbo, Fenglei Cao, Alan M. Mathiowetz, Benjamin J. Burke, Robert A. Kumpf, Brajesh K. Rai, Geoffrey P. F. Wood, Frank C. IV Pickard, Junmei Wang, Peiyu 34", "page": 33, "position": 1}
{"chunk_id": "2404.09452v2_p34_c0", "doc_id": "2404.09452v2", "text": "Zhang, Jian Ma, Yide Alan Jiang, Shuhao Wen, Xinjun Hou, Junjie Zou, and Mingjun Yang. Development and comprehensive benchmark of a high-quality amber-consistent small molecule force field with broad chemical space coverage for molecular modeling and free energy calculation. Journal of Chemical Theory and Computation, December 2023. [35] William L Jorgensen and Julian Tirado-Rives. The opls [optimized potentials for liquid simulations] potential functions for proteins, energy minimizations for crystals of cyclic peptides and crambin. Journal of the American Chemical Society, 110(6):1657–1666, 1988. [36] Huai Sun. Compass: an ab initio force-field optimized for condensed-phase applications overview with details on alkane and benzene compounds. The Journal of Physical Chem- istry B, 102(38):7338–7364, 1998. [37] Michael H Abraham, Adam Ibrahim, Andreas M Zissimos, Yuan H Zhao, John Comer, and Derek P Reynolds. Application of hydrogen bonding calculations in property based drug design. Drug Discovery Today, 7(20):1056–1063, 2002. [38] Andrea N Bootsma, Analise C Doney, and Steven E Wheeler. Predicting the strength of stacking interactions between heterocycles and aromatic amino acid side chains. Journal of the American Chemical Society, 141(28):11027–11035, 2019. [39] Chao Lu, Chuanjie Wu, Delaram Ghoreishi, Wei Chen, Lingle Wang, Wolfgang Damm, Gregory A Ross, Markus K Dahlgren, Ellery Russell, Christopher D Von Bargen, et al. Opls4: Improving force field accuracy on challenging regimes of chemical space. Journal of chemical theory and computation, 17(7):4291–4300, 2021. [40] Bethany Halford. The path to paxlovid, 2022. [41] Frans B Van Duijneveldt, Jeanne GCM van Duijneveldt-van de Rijdt, and Joop H van Lenthe. State of the art in counterpoise theory. Chemical Reviews, 94(7):1873–1885, 1994. [42] Roman M Balabin. Enthalpy difference between conformations of normal alkanes: In- tramolecular basis set superposition error (bsse) in the case of n-butane and n-hexane. The Journal of chemical physics, 129(16), 2008. [43] Pavel Hobza and Klaus M¨uller-Dethlefs. Non-covalent interactions: theory and experi- ment, volume 2. Royal Society of Chemistry, 2010. [44] Jianhui Wang, Yuki Yamada, Keitaro Sodeyama, Ching Hua Chiang, Yoshitaka Tateyama, and Atsuo Yamada. Superconcentrated electrolytes for a high-voltage lithium-ion battery. Nat. Commun., 7(1):12032, 2016. [45] Shuru Chen, Jianming Zheng, Donghai Mei, Kee Sung Han, Mark H Engelhard, Wengao Zhao,", "page": 34, "position": 0}
{"chunk_id": "2404.09452v2_p35_c0", "doc_id": "2404.09452v2", "text": "[47] Chibueze V Amanchukwu, Zhiao Yu, Xian Kong, Jian Qin, Yi Cui, and Zhenan Bao. A new class of ionically conducting fluorinated ether electrolytes with high electrochemical stability. J. Am. Chem. Soc., 142(16):7393–7403, 2020. [48] Oleg Borodin, Liumin Suo, Mallory Gobet, Xiaoming Ren, Fei Wang, Antonio Faraone, Jing Peng, Marco Olguin, Marshall Schroeder, Michael S Ding, et al. Liquid structure with nano-heterogeneity promotes cationic transport in concentrated electrolytes. ACS nano, 11(10):10462–10471, 2017. [49] Kang Xu, Yiufai Lam, Sheng S Zhang, T Richard Jow, and Timothy B Curtis. Solvation sheath of li+ in nonaqueous electrolytes and its implication of graphite/electrolyte interface chemistry. J. Phys. Chem. C, 111(20):7411–7421, 2007. [50] Oleg Borodin, Julian Self, Kristin A Persson, Chunsheng Wang, and Kang Xu. Uncharted waters: super-concentrated electrolytes. Joule, 4(1):69–100, 2020. [51] Yuki Yamada, Jianhui Wang, Seongjae Ko, Eriko Watanabe, and Atsuo Yamada. Advances and issues in developing salt-concentrated battery electrolytes. Nature Energy, 4(4):269– 280, 2019. [52] Xiang Chen, Xue-Qiang Zhang, Hao-Ran Li, and Qiang Zhang. Cation- solvent, cation- anion, and solvent- solvent interactions with electrolyte solvation in lithium batteries. Batter. Supercaps, 2(2):128–131, 2019. [53] Li Zhang and Yuhui Chen. Electrolyte solvation structure as a stabilization mechanism for electrodes. Energy Mater, 1(1):100004, 2021. [54] Heejoon Moon, Ryoichi Tatara, Toshihiko Mandai, Kazuhide Ueno, Kazuki Yoshida, Naoki Tachikawa, Tomohiro Yasuda, Kaoru Dokko, and Masayoshi Watanabe. Mechanism of li ion desolvation at the interface of graphite electrode and glyme–li salt solvate ionic liquids. J. Phys. Chem. C, 118(35):20246–20256, 2014. [55] Curt M Breneman and Kenneth B Wiberg. Determining atom-centered monopoles from molecular electrostatic potentials. the need for high sampling density in formamide con- formational analysis. Journal of Computational Chemistry, 11(3):361–373, 1990. [56] Thomas A Manz. Seven confluence principles: a case study of standardized statistical analysis for 26 methods that assign net atomic charges in molecules. RSC advances, 10(72):44121–44148, 2020. [57] John M Herbert, Leif D Jacobson, Ka Un Lao, and Mary A Rohrdanz. Rapid computation of intermolecular interactions in molecular and ionic clusters: Self-consistent polariza- tion plus symmetry-adapted perturbation theory. Physical Chemistry Chemical Physics, 14(21):7679–7699, 2012. [58] A van Bondi. van der waals volumes and radii. The", "page": 35, "position": 0}
{"chunk_id": "2404.09452v2_p36_c0", "doc_id": "2404.09452v2", "text": "[61] Joanna Siuda, Waldemar Perdoch, Bart lomiej Mazela, and Magdalena Zborowska. Cat- alyzed reaction of cellulose and lignin with methyltrimethoxysilane—ft-ir, 13c nmr and 29si nmr studies. Materials, 12(12):2006, 2019. [62] Andrew M. Teale, Ola B. Lutnæs, Trygve Helgaker, David J. Tozer, and J¨urgen Gauss. Benchmarking density-functional theory calculations of NMR shielding constants and spin–rotation constants using accurate coupled-cluster calculations. The Journal of Chem- ical Physics, 138(2):024111, 01 2013. [63] Fritz London. Th´eorie quantique des courants interatomiques dans les combinaisons aro- matiques. J. phys. radium, 8(10):397–409, 1937. [64] Minghong Yuan, Yong Zhang, Zhi Qu, Yunlong Xiao, and Wenjian Liu. Sublinear scaling quantum chemical methods for magnetic shieldings in large molecules. The Journal of Chemical Physics, 150(15), 2019. [65] Sunghwan Kim, Jie Chen, Tiejun Cheng, Asta Gindulyte, Jia He, Siqian He, Qingliang Li, Benjamin A Shoemaker, Paul A Thiessen, Bo Yu, Leonid Zaslavsky, Jian Zhang, and Evan E Bolton. PubChem 2023 update. Nucleic Acids Research, 51(D1):D1373–D1380, 10 2022. [66] Anna Pomogaeva and Daniel M. Chipman. New implicit solvation models for dispersion and exchange energies. The Journal of Physical Chemistry A, 117(28):5812–5820, 2013. PMID: 23799302. [67] Andreas Klamt. The cosmo and cosmo-rs solvation models. WIREs Computational Molec- ular Science, 8(1):e1338, 2018. [68] Adrian W. Lange and John M. Herbert. A smooth, nonsingular, and faithful discretization scheme for polarizable continuum models: The switching/Gaussian approach. The Journal of Chemical Physics, 133(24):244111, 12 2010. [69] Daniel Mejia-Rodriguez, Edoardo Apr`a, Jochen Autschbach, Nicholas P. Bauman, Eric J. Bylaska, Niranjan Govind, Jeff R. Hammond, Karol Kowalski, Alexander Kunitsa, Ajay Panyala, Bo Peng, John J. Rehr, Huajing Song, Sergei Tretiak, Marat Valiev, and Fer- nando D. Vila. Nwchem: Recent and ongoing developments. Journal of Chemical Theory and Computation, 19(20):7077–7096, 2023. PMID: 37458314. [70] Daniel A. Liotard, Gregory D. Hawkins, Gillian C. Lynch, Christopher J. Cramer, and Donald G. Truhlar. Improved methods for semiempirical solvation models. Journal of Computational Chemistry, 16(4):422–440, 1995. [71] Elric Engelage, Nils Schulz, Flemming Heinen, Stefan M. Huber, Donald G. Truhlar, and Christopher J. Cramer. Refined smd parameters for bromine and iodine accurately model halogen-bonding interactions in solution. Chemistry – A European Journal, 24(60):15983– 15987, 2018.", "page": 36, "position": 0}
{"chunk_id": "2404.09452v2_p37_c0", "doc_id": "2404.09452v2", "text": "[74] Haiyang Zhang, Yang Jiang, Hai Yan, Ziheng Cui, and Chunhua Yin. Comparative assess- ment of computational methods for free energy calculations of ionic hydration. Journal of Chemical Information and Modeling, 57(11):2763–2775, 2017. PMID: 29039666. [75] Sebastian Dohm, Markus Bursch, Andreas Hansen, and Stefan Grimme. Semiautomated transition state localization for organometallic complexes with semiempirical quantum chemical methods. Journal of Chemical Theory and Computation, 16(3):2002–2012, 2020. PMID: 32074450. [76] Tom A. Young, Joseph J. Silcock, Alistair J. Sterling, and Fernanda Duarte. autode: Au- tomated calculation of reaction energy profiles— application to organic and organometallic reactions. Angewandte Chemie International Edition, 60(8):4266–4274, 2021. [77] Leif D. Jacobson, Art D. Bochevarov, Mark A. Watson, Thomas F. Hughes, David Rinaldo, Stephan Ehrlich, Thomas B. Steinbrecher, S. Vaitheeswaran, Dean M. Philipp, Mathew D. Halls, and Richard A. Friesner. Automated transition state search and its application to diverse types of organic reactions. Journal of Chemical Theory and Computation, 13(11):5780–5797, 2017. PMID: 28957627. [78] Mark A. Iron and Trevor Janes. Evaluating transition metal barrier heights with the latest density functional theory exchange–correlation functionals: The mobh35 bench- mark database. The Journal of Physical Chemistry A, 123(17):3761–3781, 2019. PMID: 30973722. [79] Lee-Ping Wang and Chenchen Song. Geometry optimization made simple with translation and rotation coordinates. The Journal of Chemical Physics, 144(21):214108, 06 2016. [80] Cleber FN Marchiori, Rodrigo P Carvalho, Mahsa Ebadi, Daniel Brandell, and C Moyses Araujo. Understanding the electrochemical stability window of polymer electrolytes in solid-state batteries from atomic-scale modeling: the role of li-ion salts. Chemistry of Materials, 32(17):7237–7246, 2020. [81] Samuel A Delp, Oleg Borodin, Marco Olguin, Claire G Eisner, Joshua L Allen, and T Richard Jow. Importance of reduction and oxidation stability of high voltage electrolytes and additives. Electrochimica Acta, 209:498–510, 2016. [82] David S Hall, Ahmed Eldesoky, ER Logan, Erin Marie Tonita, Xiaowei Ma, and JR Dahn. Exploring classes of co-solvents for fast-charging lithium-ion cells. Journal of The Electro- chemical Society, 165(10):A2365, 2018. [83] John B Goodenough and Kyu-Sung Park. The li-ion rechargeable battery: a perspective. Journal of the American Chemical Society, 135(4):1167–1176, 2013. [84] John B Goodenough. Rechargeable batteries: challenges old and new. Journal", "page": 37, "position": 0}
{"chunk_id": "2404.09452v2_p38_c0", "doc_id": "2404.09452v2", "text": "[87] Tingzheng Hou, Guang Yang, Nav Nidhi Rajput, Julian Self, Sang-Won Park, Jagjit Nanda, and Kristin A Persson. The influence of fec on the solvation structure and re- duction reaction of lipf6/ec electrolytes and its implication for solid electrolyte interphase formation. Nano Energy, 64:103881, 2019. [88] Oleg Borodin, Marco Olguin, Carrie E Spear, Kenneth W Leiter, and Jaroslaw Knap. Towards high throughput screening of electrochemical stability of battery electrolytes. Nanotechnology, 26(35):354003, 2015. [89] Tian Lu and Feiwu Chen. Multiwfn: A multifunctional wavefunction analyzer. Journal of computational chemistry, 33(5):580–592, 2012. [90] Robert G Parr and Weitao Yang. Density functional approach to the frontier-electron theory of chemical reactivity. Journal of the American Chemical Society, 106(14):4049– 4050, 1984. [91] Roberto Flores-Moreno, Junia Melin, JV Ortiz, and Gabriel Merino. Efficient evaluation of analytic fukui functions. The Journal of chemical physics, 129(22), 2008. [92] Weitao Yang and Wilfried J Mortier. The use of global and local molecular parameters for the analysis of the gas-phase basicity of amines. Journal of the American Chemical Society, 108(19):5708–5711, 1986. [93] William Humphrey, Andrew Dalke, and Klaus Schulten. Vmd: visual molecular dynamics. Journal of molecular graphics, 14(1):33–38, 1996. [94] D. Pfau, J.S. Spencer, A.G. de G. Matthews, and W.M.C. Foulkes. Ab-initio solution of the many-electron schr¨odinger equation with deep neural networks. Phys. Rev. Research, 2:033429, 2020. [95] James Kirkpatrick, Brendan McMorrow, David H. P. Turban, Alexander L. Gaunt, James S. Spencer, Alexander G. D. G. Matthews, Annette Obika, Louis Thiry, Meire Fortunato, David Pfau, Lara Rom´an Castellanos, Stig Petersen, Alexander W. R. Nelson, Pushmeet Kohli, Paula Mori-S´anchez, Demis Hassabis, and Aron J. Cohen. Pushing the frontiers of density functionals by solving the fractional electron problem. Science, 374(6573):1385– 1389, 2021. [96] Jiequn Han, Linfeng Zhang, and E Weinan. Solving many-electron schr¨odinger equation using deep neural networks. Journal of Computational Physics, 399:108929, 2019. [97] Jan Hermann, Zeno Sch¨atzle, and Frank No´e. Deep-neural-network solution of the elec- tronic schr¨odinger equation. Nature Chemistry, 12(10):891–897, 2020. [98] Ruichen Li, Haotian Ye, Du Jiang, Xuelan Wen, Chuwei Wang, Zhe Li, Xiang Li, Di He, Ji Chen, Weiluo Ren, and Liwei Wang. A computational framework for neural", "page": 38, "position": 0}
{"chunk_id": "2404.09452v2_p39_c0", "doc_id": "2404.09452v2", "text": "[101] Eike Caldeweyher, Sebastian Ehlert, Andreas Hansen, Hagen Neugebauer, Sebastian Spicher, Christoph Bannwarth, and Stefan Grimme. A generally applicable atomic- charge dependent London dispersion correction. The Journal of Chemical Physics, 150(15):154122, 04 2019. [102] Qiming Sun. Libcint: An efficient general integral library for gaussian basis functions. Journal of Computational Chemistry, 36:1664–1671, 2015. [103] Ryosuke Okuta, Yuya Unno, Daisuke Nishino, Shohei Hido, and Crissman Loomis. Cupy: A numpy-compatible library for nvidia gpu calculations. In Proceedings of Workshop on Machine Learning Systems (LearningSys) in The Thirty-first Annual Conference on Neural Information Processing Systems (NIPS), 2017. [104] Daniel G. a. Smith and Johnnie Gray. opt einsum - a python package for optimizing contraction order for einsum-like expressions. Journal of Open Source Software, 3(26):753, 2018. [105] The cuQuantum development team. Nvidia cuquantum sdk, November 2023. [106] Ryan Stocks, Elise Palethorpe, and Giuseppe M. J. Barca. High-performance multi-gpu analytic ri-mp2 energy gradients. Journal of Chemical Theory and Computation, 0(0):null, 0. PMID: 38456899. [107] Dmytro Bykov and Thomas Kjaergaard. The gpu-enabled divide-expand-consolidate ri- mp2 method (dec-ri-mp2). Journal of Computational Chemistry, 38(4):228–237, 2017. [108] JaeHyuk Kwack, Colleen Bertoni, Buu Pham, and Jeff Larkin. Performance of the ri-mp2 fortran kernel of gamess on gpus via directive-based offloading with math libraries. In Accelerator Programming Using Directives: 6th International Workshop, WACCPD 2019, Denver, CO, USA, November 18, 2019, Revised Selected Papers 6, pages 91–113. Springer, 2020. [109] Dipayan Datta and Mark S. Gordon. Accelerating coupled-cluster calculations with gpus: An implementation of the density-fitted ccsd(t) approach for heterogeneous computing architectures using openmp directives. Journal of Chemical Theory and Computation, 19(21):7640–7657, 2023. PMID: 37878756. [110] Jinsung Kim, Ajay Panyala, Bo Peng, Karol Kowalski, P. Sadayappan, and Sriram Krish- namoorthy. Scalable heterogeneous execution of a coupled-cluster model with perturbative triples. In SC20: International Conference for High Performance Computing, Networking, Storage and Analysis, pages 1–15, 2020. [111] Qiming Sun. Various integral estimations and screening schemes for extended systems in pyscf, 2023. [112] Andrey Asadchev and Mark S. Gordon. Mixed-precision evaluation of two-electron integrals by rys quadrature. Computer Physics Communications, 183(8):1563–1567, 2012. [113] Nathan Luehr, Ivan S. Ufimtsev, and Todd J. Mart´ınez. Dynamic precision for", "page": 39, "position": 0}
